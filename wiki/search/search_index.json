{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my Wiki For full documentation ...","title":"Welcome to my Wiki"},{"location":"#welcome-to-my-wiki","text":"For full documentation ...","title":"Welcome to my Wiki"},{"location":"apache/","text":"Apache Virtual Host Example <VirtualHost *:80> ServerName jhonmike.com.br ServerAlias www.jhonmike.com.br ServerAdmin developer@jhonmike.com.br DocumentRoot /var/www/jhonmike/public <Directory /var/www/jhonmike/public> Options Indexes FollowSymLinks AllowOverride All Require all granted </Directory> ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined </VirtualHost> Apache > 2.4 using Require all granted instead of: Order allow,deny Allow from all Ativando Virtual Host Arch Descomente /etc/httpd/conf/extra/httpd-vhosts.conf do arquivo /etc/httpd/conf/httpd.conf e adicione seus vhosts l\u00e1. Ubuntu a2ensite /etc/apache2/sites-available/jhonmike.com.br.conf ModRewrite Arch Descomente LoadModule rewrite_module modules/mod_rewrite.so do arquivo /etc/httpd/conf/httpd.conf e restart o servi\u00e7o httpd Ubuntu Para habilitar o m\u00f3dulo no Apache basta esta linha: a2enmod rewrite Agora abra o arquivo de configura\u00e7\u00e3o: vim /etc/apache2/sites-available/default Procure no seu arquivo a entrada \"AllowOverride None\" Altere esse valor para \"AllowOverride All\" . Salve o arquivo e reinicie o Apache. /etc/init.d/apache2 restart or service apache2 restart","title":"Apache"},{"location":"apache/#apache","text":"","title":"Apache"},{"location":"apache/#virtual-host-example","text":"<VirtualHost *:80> ServerName jhonmike.com.br ServerAlias www.jhonmike.com.br ServerAdmin developer@jhonmike.com.br DocumentRoot /var/www/jhonmike/public <Directory /var/www/jhonmike/public> Options Indexes FollowSymLinks AllowOverride All Require all granted </Directory> ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined </VirtualHost> Apache > 2.4 using Require all granted instead of: Order allow,deny Allow from all","title":"Virtual Host Example"},{"location":"apache/#ativando-virtual-host","text":"","title":"Ativando Virtual Host"},{"location":"apache/#arch","text":"Descomente /etc/httpd/conf/extra/httpd-vhosts.conf do arquivo /etc/httpd/conf/httpd.conf e adicione seus vhosts l\u00e1.","title":"Arch"},{"location":"apache/#ubuntu","text":"a2ensite /etc/apache2/sites-available/jhonmike.com.br.conf","title":"Ubuntu"},{"location":"apache/#modrewrite","text":"","title":"ModRewrite"},{"location":"apache/#arch_1","text":"Descomente LoadModule rewrite_module modules/mod_rewrite.so do arquivo /etc/httpd/conf/httpd.conf e restart o servi\u00e7o httpd","title":"Arch"},{"location":"apache/#ubuntu_1","text":"Para habilitar o m\u00f3dulo no Apache basta esta linha: a2enmod rewrite Agora abra o arquivo de configura\u00e7\u00e3o: vim /etc/apache2/sites-available/default Procure no seu arquivo a entrada \"AllowOverride None\" Altere esse valor para \"AllowOverride All\" . Salve o arquivo e reinicie o Apache. /etc/init.d/apache2 restart or service apache2 restart","title":"Ubuntu"},{"location":"docker/","text":"Docker Installing sudo pacman -S docker newgrp docker sudo gpasswd -a jhon docker systemctl start docker Pull Image Ex.: docker pull postgres:9.5.7 Start Container Ex.: docker run -i -p 5432:5432 --name postgres -e POSTGRES_DB=xpto_db -d postgres:9.5.7 Exec command in container Ex.: docker exec postgres pg_dump -U postgres xpto_db > backup.sql Docker copy file from container Ex.: docker cp ./Downloads/backup.sql postgres:/backup.sql Contaner access Ex.: docker exec -it postgres bash","title":"Docker"},{"location":"docker/#docker","text":"","title":"Docker"},{"location":"docker/#installing","text":"sudo pacman -S docker newgrp docker sudo gpasswd -a jhon docker systemctl start docker","title":"Installing"},{"location":"docker/#pull-image","text":"Ex.: docker pull postgres:9.5.7","title":"Pull Image"},{"location":"docker/#start-container","text":"Ex.: docker run -i -p 5432:5432 --name postgres -e POSTGRES_DB=xpto_db -d postgres:9.5.7","title":"Start Container"},{"location":"docker/#exec-command-in-container","text":"Ex.: docker exec postgres pg_dump -U postgres xpto_db > backup.sql","title":"Exec command in container"},{"location":"docker/#docker-copy-file-from-container","text":"Ex.: docker cp ./Downloads/backup.sql postgres:/backup.sql","title":"Docker copy file from container"},{"location":"docker/#contaner-access","text":"Ex.: docker exec -it postgres bash","title":"Contaner access"},{"location":"go/","text":"Go Lang Check that Go is installed correctly by building a simple program, as follows: hello.go package main import \"fmt\" func main() { fmt.Println(\"Hello, Arch!\") } Then run it with the go tool: $ go run hello.go Hello, Arch! Compilation with standard gc compiler (same as go build -compiler=gc hello.go): $ go build hello.go $ ./hello Hello, Arch! Simple Api GO package main import ( \"fmt\" \"html\" \"log\" \"net/http\" ) func main() { http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \"Hello, %q\", html.EscapeString(r.URL.Path)) }) log.Fatal(http.ListenAndServe(\":8080\", nil)) }","title":"Go Lang"},{"location":"go/#go-lang","text":"Check that Go is installed correctly by building a simple program, as follows: hello.go package main import \"fmt\" func main() { fmt.Println(\"Hello, Arch!\") } Then run it with the go tool: $ go run hello.go Hello, Arch! Compilation with standard gc compiler (same as go build -compiler=gc hello.go): $ go build hello.go $ ./hello Hello, Arch!","title":"Go Lang"},{"location":"go/#simple-api-go","text":"package main import ( \"fmt\" \"html\" \"log\" \"net/http\" ) func main() { http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \"Hello, %q\", html.EscapeString(r.URL.Path)) }) log.Fatal(http.ListenAndServe(\":8080\", nil)) }","title":"Simple Api GO"},{"location":"ingles/","text":"","title":"Ingles"},{"location":"mkdocs/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. mkdocs file site_name: Jhon Mike Wiki theme: readthedocs","title":"Welcome to MkDocs"},{"location":"mkdocs/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"mkdocs/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"mkdocs/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"mkdocs/#mkdocs-file","text":"site_name: Jhon Mike Wiki theme: readthedocs","title":"mkdocs file"},{"location":"shell/","text":"Shell Comando para dar redirect no shell e limpar mensagens [:command] &>/dev/null Python pipe With Python 2.6+ you can just do: echo '{\"foo\": \"lorem\", \"bar\": \"ipsum\"}' | python -m json.tool or, if the JSON is in a file, you can do: python -m json.tool my_json.json if the JSON is from an internet source such as an API, you can use curl http://my_url/ | python -m json.tool for convenience in all of these cases you can make an alias: alias prettyjson='python -m json.tool'","title":"Shell"},{"location":"shell/#shell","text":"","title":"Shell"},{"location":"shell/#comando-para-dar-redirect-no-shell-e-limpar-mensagens","text":"[:command] &>/dev/null","title":"Comando para dar redirect no shell e limpar mensagens"},{"location":"shell/#python-pipe","text":"With Python 2.6+ you can just do: echo '{\"foo\": \"lorem\", \"bar\": \"ipsum\"}' | python -m json.tool or, if the JSON is in a file, you can do: python -m json.tool my_json.json if the JSON is from an internet source such as an API, you can use curl http://my_url/ | python -m json.tool for convenience in all of these cases you can make an alias: alias prettyjson='python -m json.tool'","title":"Python pipe"},{"location":"sql/","text":"SQL INSERT INSERT INTO table_name VALUES (value1,value2,value3); OR INSERT INTO table_name (column1,column2,column3) VALUES (value1,value2,value3); UPDATE UPDATE table_name SET column1=value1,column2=value2 WHERE some_column=some_value; DELETE DELETE FROM table_name WHERE some_column=some_value; SELECT SELECT * FROM table_name WHERE some_column=some_value ORDER BY column_name ASC, column_name DESC; JOIN SELECT * FROM order INNER JOIN customer ON Orders.customerId=Customers.id; CREATE TABLE CREATE TABLE table_name ( id INT AUTO_INCREMENT NOT NULL, sequence INT(10) NOT NULL, account_id INT DEFAULT NULL, revenue_id INT DEFAULT NULL, created DATETIME NOT NULL, updated DATETIME DEFAULT NULL, INDEX IDX_921775439B6B5FBA (account_id), INDEX IDX_92177543224718EB (revenue_id), PRIMARY KEY(id) ); ALTER TABLE ALTER TABLE client ADD email_accountant varchar(100); ALTER TABLE zip_code MODIFY COLUMN zipCode varchar(8); ALTER TABLE client CHANGE columnOldName columnNewName varchar(10); Show info table DESCRIBE client;","title":"SQL"},{"location":"sql/#sql","text":"","title":"SQL"},{"location":"sql/#insert","text":"INSERT INTO table_name VALUES (value1,value2,value3); OR INSERT INTO table_name (column1,column2,column3) VALUES (value1,value2,value3);","title":"INSERT"},{"location":"sql/#update","text":"UPDATE table_name SET column1=value1,column2=value2 WHERE some_column=some_value;","title":"UPDATE"},{"location":"sql/#delete","text":"DELETE FROM table_name WHERE some_column=some_value;","title":"DELETE"},{"location":"sql/#select","text":"SELECT * FROM table_name WHERE some_column=some_value ORDER BY column_name ASC, column_name DESC;","title":"SELECT"},{"location":"sql/#join","text":"SELECT * FROM order INNER JOIN customer ON Orders.customerId=Customers.id;","title":"JOIN"},{"location":"sql/#create-table","text":"CREATE TABLE table_name ( id INT AUTO_INCREMENT NOT NULL, sequence INT(10) NOT NULL, account_id INT DEFAULT NULL, revenue_id INT DEFAULT NULL, created DATETIME NOT NULL, updated DATETIME DEFAULT NULL, INDEX IDX_921775439B6B5FBA (account_id), INDEX IDX_92177543224718EB (revenue_id), PRIMARY KEY(id) );","title":"CREATE TABLE"},{"location":"sql/#alter-table","text":"ALTER TABLE client ADD email_accountant varchar(100); ALTER TABLE zip_code MODIFY COLUMN zipCode varchar(8); ALTER TABLE client CHANGE columnOldName columnNewName varchar(10);","title":"ALTER TABLE"},{"location":"sql/#show-info-table","text":"DESCRIBE client;","title":"Show info table"},{"location":"ecmascript/angular/","text":"","title":"Angular"},{"location":"editor/sublime-text/","text":"My Config Sublime { \"theme\": \"Soda Dark 3.sublime-theme\", \"soda_folder_icons\": true, \"color_scheme\": \"Packages/Dracula Color Scheme/Dracula.tmTheme\", \"draw_white_space\": \"all\", \"ensure_newline_at_eof_on_save\": true, \"translate_tabs_to_spaces\": true, \"index_files\": false, \"ignored_packages\": [ \"Vintage\" ], \"vintage_ctrl_keys\": false, \"vintage_start_in_command_mode\": false, \"rulers\": [ 100, 120 ] } Config Keys [ { \"keys\": [\"alt+shift+up\"], \"command\": \"select_lines\", \"args\": {\"forward\": false} }, { \"keys\": [\"alt+shift+down\"], \"command\": \"select_lines\", \"args\": {\"forward\": true} } ] Config Keys OpenBox [ { \"keys\": [\"super+shift+up\"], \"command\": \"select_lines\", \"args\": {\"forward\": false} }, { \"keys\": [\"super+shift+down\"], \"command\": \"select_lines\", \"args\": {\"forward\": true} } ]","title":"My Config Sublime"},{"location":"editor/sublime-text/#my-config-sublime","text":"{ \"theme\": \"Soda Dark 3.sublime-theme\", \"soda_folder_icons\": true, \"color_scheme\": \"Packages/Dracula Color Scheme/Dracula.tmTheme\", \"draw_white_space\": \"all\", \"ensure_newline_at_eof_on_save\": true, \"translate_tabs_to_spaces\": true, \"index_files\": false, \"ignored_packages\": [ \"Vintage\" ], \"vintage_ctrl_keys\": false, \"vintage_start_in_command_mode\": false, \"rulers\": [ 100, 120 ] }","title":"My Config Sublime"},{"location":"editor/sublime-text/#config-keys","text":"[ { \"keys\": [\"alt+shift+up\"], \"command\": \"select_lines\", \"args\": {\"forward\": false} }, { \"keys\": [\"alt+shift+down\"], \"command\": \"select_lines\", \"args\": {\"forward\": true} } ]","title":"Config Keys"},{"location":"editor/sublime-text/#config-keys-openbox","text":"[ { \"keys\": [\"super+shift+up\"], \"command\": \"select_lines\", \"args\": {\"forward\": false} }, { \"keys\": [\"super+shift+down\"], \"command\": \"select_lines\", \"args\": {\"forward\": true} } ]","title":"Config Keys OpenBox"},{"location":"editor/vim/","text":"Vim Atalhos Modo normal: Navega\u00e7\u00e3o com vim, hjkl. Navega\u00e7\u00e3o por palavras, w, e Indo pro vim, com $, pro come\u00e7o com 0 ou ^ ou _ Indo pro come\u00e7o, fim: gg, G Indo pra linha: 5G Indo pra cima, meio, baixo (High, Middle, Low): H, M, L Indo pro primeiro caracter k: fk Repetindo: ; Procurando outras ocorr\u00eancias da palavra: *, depois n Meia p\u00e1gina pra baixo ou cima: CTRL-D, CTRL-U Batendo par\u00eantesis, chave ou colchete: % Combinando: 3w, 3ft Editando com modo normal: r, d, y, p, P, ~ Combinando: 3yy, 2dd, 3w, 3p Repetindo: . Undo: u Redo: CTRL-R Modo visual e bloco: Editando com modo visual: u, U, ~ Combinando: 3yy, 2dd, 3w Comandos: :w, :x, :wq, :q, :q! Insert Mode: Entrando em insert mode: i, a, A, c, o, O","title":"Vim Atalhos"},{"location":"editor/vim/#vim-atalhos","text":"","title":"Vim Atalhos"},{"location":"editor/vim/#modo-normal","text":"Navega\u00e7\u00e3o com vim, hjkl. Navega\u00e7\u00e3o por palavras, w, e Indo pro vim, com $, pro come\u00e7o com 0 ou ^ ou _ Indo pro come\u00e7o, fim: gg, G Indo pra linha: 5G Indo pra cima, meio, baixo (High, Middle, Low): H, M, L Indo pro primeiro caracter k: fk Repetindo: ; Procurando outras ocorr\u00eancias da palavra: *, depois n Meia p\u00e1gina pra baixo ou cima: CTRL-D, CTRL-U Batendo par\u00eantesis, chave ou colchete: % Combinando: 3w, 3ft Editando com modo normal: r, d, y, p, P, ~ Combinando: 3yy, 2dd, 3w, 3p Repetindo: . Undo: u Redo: CTRL-R","title":"Modo normal:"},{"location":"editor/vim/#modo-visual-e-bloco","text":"Editando com modo visual: u, U, ~ Combinando: 3yy, 2dd, 3w","title":"Modo visual e bloco:"},{"location":"editor/vim/#comandos","text":":w, :x, :wq, :q, :q!","title":"Comandos:"},{"location":"editor/vim/#insert-mode","text":"Entrando em insert mode: i, a, A, c, o, O","title":"Insert Mode:"},{"location":"interfaces/i3wm/","text":"","title":"I3wm"},{"location":"interfaces/openbox/","text":"","title":"Openbox"},{"location":"linux/arch-instalacao/","text":"Instala\u00e7\u00e3o Arch Wiki Perfeita Guia de Instala\u00e7\u00e3o Arch (o encrypt tem que ser feito pouco antes da forma\u00e7\u00e3o das parti\u00e7\u00f5es e ele afeta em alguns detalhes do GRUB) Encrypt Parti\u00e7\u00e3o Configura\u00e7\u00e3o do GRUB Deepin Interface no Arch Mais ou menos como fiz: Definiremos o layout do nosso teclado: loadkeys br-abnt2 Vamos alterar o idioma da instala\u00e7\u00e3o: descomente a linha com #pt_BR.UTF-8 do arquivo /etc/locale.gen Ap\u00f3s o procedimento de altera\u00e7\u00e3o: locale-gen && export LANG=pt_BR.UTF-8 Particionando o HD para modo UEFI /dev/sda1 /boot/efi type: EFI 512M /dev/sda2 type: swap 4G /dev/sda3 / type: ext4 full /dev/sda4 /home type: ext4 full (opcional) Acessando a rede wifi wifi-menu ping -c3 google.com Formata\u00e7\u00e3o fdisk -l Montando as parti\u00e7\u00f5es sem crypt / mkfs.ext4 /dev/sda3 mount /dev/sda3 /mnt Swap mkswap /dev/sda2 swapon /dev/sda2 UEFI mkfs.fat -F32 /dev/sda1 mkdir /mnt/boot mkdir /mnt/boot/efi mount /dev/sda1 /mnt/boot/efi Home (opcional) mkdir /mnt/home mount /dev/sda4 /mnt/home Montando as parti\u00e7\u00f5es com crypt / cryptsetup -y -v luksFormat /dev/sda3 cryptsetup open /dev/sda3 cryptroot mkfs.ext4 /dev/mapper/cryptroot mount /dev/mapper/cryptroot /mnt Swap mkswap /dev/sda2 swapon /dev/sda2 UEFI mkfs.fat -F32 /dev/sda1 mkdir /mnt/boot mkdir /mnt/boot/efi mount /dev/sda1 /mnt/boot/efi Agora configuraremos os reposit\u00f3rios do Arch Linux: No arquivo /etc/pacman.d/mirrorlist esta a ordem de prioridade dos links que seram utilizados na busca de pacotes se desejar altere a ordem colocando os links do BRAZIL no topo da lista. Em seguida instale a base do arch pacstrap -i /mnt base base-devel Fstab O Fstab ira salvar gerar as configs de montagem das parti\u00e7\u00f5es de seu hd/ssd genfstab -U -p /mnt >> /mnt/etc/fstab Iniciando root arch-chroot /mnt /bin/bash Configura\u00e7\u00f5es basicas do seu ArchLinux Idioma do Arch Linux, descomente a linha com pt_BR do arquivo /etc/locale.gen e rode locale-gen Em seguida, execute: echo LANG=pt_BR.UTF-8 > /etc/locale.conf && export LANG=pt_BR.UTF-8 Fuso Hor\u00e1rio: ln -sf /usr/share/zoneinfo/America/Sao_Paulo /etc/localtime Rel\u00f3gio do Hardware: hwclock --systohc --utc Hostname: echo ArchLinux > /etc/hostname Instala\u00e7\u00e3o das ferramentas Wireless no sistema base do Arch Linux: pacman -S wireless_tools wpa_supplicant wpa_actiond dialog Ambiente inicial: mkinitcpio -p linux Senha do root: passwd Informe sua senha, confirme e d\u00ea um Enter. Habilitar multilib vim /etc/pacman.conf No arquivo procure as linhas: #[multilib] #Include = /etc/pacman.d/mirrorlist Retire o # de ambas e atualize o pacman pacman -Syu Config de BOOT Grub Syslinux Criar usu\u00e1rio padr\u00e3o: useradd -m -g users -G wheel -s /bin/bash seu-usuario passwd seu-usuario Adicionar permiss\u00f5es do sistema ao usu\u00e1rio: gpasswd -a seu-usuario locate gpasswd -a seu-usuario users gpasswd -a seu-usuario audio gpasswd -a seu-usuario video gpasswd -a seu-usuario daemon gpasswd -a seu-usuario dbus gpasswd -a seu-usuario disk gpasswd -a seu-usuario games gpasswd -a seu-usuario rfkill gpasswd -a seu-usuario lp gpasswd -a seu-usuario network gpasswd -a seu-usuario optical gpasswd -a seu-usuario power gpasswd -a seu-usuario scanner gpasswd -a seu-usuario storage Xorg pacman -S xorg-xinit xorg-server Intel pacman -S xf86-video-intel mesa mesa-demos NVIDIA Mostrar os controladores compat\u00edveis VGA: lspci | grep VGA Instala\u00e7\u00e3o dos drivers: pacman -S intel-dri xf86-video-intel bumblebee nvidia Instala\u00e7\u00e3o do bbswitch: pacman -S bbswitch Instala\u00e7\u00e3o das libs 32bits (Caso seu Arch seja da arquitetura 86_x64, configurar o multilib no arquivo /etc/pacman.conf) e demais pacotes: pacman -S lib32-nvidia-utils pacman -S lib32-intel-dri pacman -S opencl-nvidia pacman -S lib32-virtualgl Adicionar o nosso usu\u00e1rio ao grupo Bumblebee: gpasswd -a nomeDoUsuario bumblebee Verificar e ativar o servi\u00e7o do Bumblebee: systemctl status bumblebeed systemctl enable bumblebeed systemctl start bumblebeed Testar elemento gr\u00e1fico do pacote opencl: glxspheres64 Testar elemento gr\u00e1fico do pacote opencl utilizando a placa dedicada Nvidia: optirun glxspheres64 DICA: Para testar se o bbswitch est\u00e1 ativo: cat /proc/acpi/bbswitch DICA DE EXECU\u00c7\u00c3O: Para executar alguma aplica\u00e7\u00e3o com o uso da placa gr\u00e1fica NVIDIA: optirun nomeAplicacao ATI pacman -S xf86-video-ati touchpad, mouse e teclado, respectivamente. pacman -S xf86-input-synaptics xf86-input-mouse xf86-input-keyboard Configura\u00e7\u00e3o do sudo: Editar o arquivo /etc/sudoers como abaixo: root ALL=(ALL) ALL seu-usuario ALL=(ALL) ALL Pacotes do AUR No arquivo /etc/pacman.conf adicione as seguintes linhas no final do arquivo: [archlinuxfr] SigLevel = Never Server = http://repo.archlinux.fr/$arch e execute: pacman -Sy yaourt Pronto! Finalizamos a instala\u00e7\u00e3o e configura\u00e7\u00e3o b\u00e1sica do sistema. Saia do chroot: exit Desmonte tudo relacionado a pasta /mnt e reinicie o sistema: umount -R /mnt && reboot","title":"Instala\u00e7\u00e3o Arch"},{"location":"linux/arch-instalacao/#instalacao-arch","text":"","title":"Instala\u00e7\u00e3o Arch"},{"location":"linux/arch-instalacao/#wiki-perfeita","text":"Guia de Instala\u00e7\u00e3o Arch (o encrypt tem que ser feito pouco antes da forma\u00e7\u00e3o das parti\u00e7\u00f5es e ele afeta em alguns detalhes do GRUB) Encrypt Parti\u00e7\u00e3o Configura\u00e7\u00e3o do GRUB Deepin Interface no Arch","title":"Wiki Perfeita"},{"location":"linux/arch-instalacao/#mais-ou-menos-como-fiz","text":"","title":"Mais ou menos como fiz:"},{"location":"linux/arch-instalacao/#definiremos-o-layout-do-nosso-teclado","text":"loadkeys br-abnt2","title":"Definiremos o layout do nosso teclado:"},{"location":"linux/arch-instalacao/#vamos-alterar-o-idioma-da-instalacao","text":"descomente a linha com #pt_BR.UTF-8 do arquivo /etc/locale.gen Ap\u00f3s o procedimento de altera\u00e7\u00e3o: locale-gen && export LANG=pt_BR.UTF-8","title":"Vamos alterar o idioma da instala\u00e7\u00e3o:"},{"location":"linux/arch-instalacao/#particionando-o-hd-para-modo-uefi","text":"/dev/sda1 /boot/efi type: EFI 512M /dev/sda2 type: swap 4G /dev/sda3 / type: ext4 full /dev/sda4 /home type: ext4 full (opcional)","title":"Particionando o HD para modo UEFI"},{"location":"linux/arch-instalacao/#acessando-a-rede-wifi","text":"wifi-menu ping -c3 google.com","title":"Acessando a rede wifi"},{"location":"linux/arch-instalacao/#formatacao","text":"fdisk -l","title":"Formata\u00e7\u00e3o"},{"location":"linux/arch-instalacao/#montando-as-particoes-sem-crypt","text":"/ mkfs.ext4 /dev/sda3 mount /dev/sda3 /mnt Swap mkswap /dev/sda2 swapon /dev/sda2 UEFI mkfs.fat -F32 /dev/sda1 mkdir /mnt/boot mkdir /mnt/boot/efi mount /dev/sda1 /mnt/boot/efi Home (opcional) mkdir /mnt/home mount /dev/sda4 /mnt/home","title":"Montando as parti\u00e7\u00f5es sem crypt"},{"location":"linux/arch-instalacao/#montando-as-particoes-com-crypt","text":"/ cryptsetup -y -v luksFormat /dev/sda3 cryptsetup open /dev/sda3 cryptroot mkfs.ext4 /dev/mapper/cryptroot mount /dev/mapper/cryptroot /mnt Swap mkswap /dev/sda2 swapon /dev/sda2 UEFI mkfs.fat -F32 /dev/sda1 mkdir /mnt/boot mkdir /mnt/boot/efi mount /dev/sda1 /mnt/boot/efi","title":"Montando as parti\u00e7\u00f5es com crypt"},{"location":"linux/arch-instalacao/#agora-configuraremos-os-repositorios-do-arch-linux","text":"No arquivo /etc/pacman.d/mirrorlist esta a ordem de prioridade dos links que seram utilizados na busca de pacotes se desejar altere a ordem colocando os links do BRAZIL no topo da lista. Em seguida instale a base do arch pacstrap -i /mnt base base-devel","title":"Agora configuraremos os reposit\u00f3rios do Arch Linux:"},{"location":"linux/arch-instalacao/#fstab","text":"O Fstab ira salvar gerar as configs de montagem das parti\u00e7\u00f5es de seu hd/ssd genfstab -U -p /mnt >> /mnt/etc/fstab","title":"Fstab"},{"location":"linux/arch-instalacao/#iniciando-root","text":"arch-chroot /mnt /bin/bash","title":"Iniciando root"},{"location":"linux/arch-instalacao/#configuracoes-basicas-do-seu-archlinux","text":"Idioma do Arch Linux, descomente a linha com pt_BR do arquivo /etc/locale.gen e rode locale-gen Em seguida, execute: echo LANG=pt_BR.UTF-8 > /etc/locale.conf && export LANG=pt_BR.UTF-8 Fuso Hor\u00e1rio: ln -sf /usr/share/zoneinfo/America/Sao_Paulo /etc/localtime Rel\u00f3gio do Hardware: hwclock --systohc --utc Hostname: echo ArchLinux > /etc/hostname","title":"Configura\u00e7\u00f5es basicas do seu ArchLinux"},{"location":"linux/arch-instalacao/#instalacao-das-ferramentas-wireless-no-sistema-base-do-arch-linux","text":"pacman -S wireless_tools wpa_supplicant wpa_actiond dialog","title":"Instala\u00e7\u00e3o das ferramentas Wireless no sistema base do Arch Linux:"},{"location":"linux/arch-instalacao/#ambiente-inicial","text":"mkinitcpio -p linux","title":"Ambiente inicial:"},{"location":"linux/arch-instalacao/#senha-do-root","text":"passwd Informe sua senha, confirme e d\u00ea um Enter.","title":"Senha do root:"},{"location":"linux/arch-instalacao/#habilitar-multilib","text":"vim /etc/pacman.conf No arquivo procure as linhas: #[multilib] #Include = /etc/pacman.d/mirrorlist Retire o # de ambas e atualize o pacman pacman -Syu","title":"Habilitar multilib"},{"location":"linux/arch-instalacao/#config-de-boot","text":"Grub Syslinux","title":"Config de BOOT"},{"location":"linux/arch-instalacao/#criar-usuario-padrao","text":"useradd -m -g users -G wheel -s /bin/bash seu-usuario passwd seu-usuario Adicionar permiss\u00f5es do sistema ao usu\u00e1rio: gpasswd -a seu-usuario locate gpasswd -a seu-usuario users gpasswd -a seu-usuario audio gpasswd -a seu-usuario video gpasswd -a seu-usuario daemon gpasswd -a seu-usuario dbus gpasswd -a seu-usuario disk gpasswd -a seu-usuario games gpasswd -a seu-usuario rfkill gpasswd -a seu-usuario lp gpasswd -a seu-usuario network gpasswd -a seu-usuario optical gpasswd -a seu-usuario power gpasswd -a seu-usuario scanner gpasswd -a seu-usuario storage","title":"Criar usu\u00e1rio padr\u00e3o:"},{"location":"linux/arch-instalacao/#xorg","text":"pacman -S xorg-xinit xorg-server","title":"Xorg"},{"location":"linux/arch-instalacao/#intel","text":"pacman -S xf86-video-intel mesa mesa-demos","title":"Intel"},{"location":"linux/arch-instalacao/#nvidia","text":"Mostrar os controladores compat\u00edveis VGA: lspci | grep VGA Instala\u00e7\u00e3o dos drivers: pacman -S intel-dri xf86-video-intel bumblebee nvidia Instala\u00e7\u00e3o do bbswitch: pacman -S bbswitch Instala\u00e7\u00e3o das libs 32bits (Caso seu Arch seja da arquitetura 86_x64, configurar o multilib no arquivo /etc/pacman.conf) e demais pacotes: pacman -S lib32-nvidia-utils pacman -S lib32-intel-dri pacman -S opencl-nvidia pacman -S lib32-virtualgl Adicionar o nosso usu\u00e1rio ao grupo Bumblebee: gpasswd -a nomeDoUsuario bumblebee Verificar e ativar o servi\u00e7o do Bumblebee: systemctl status bumblebeed systemctl enable bumblebeed systemctl start bumblebeed Testar elemento gr\u00e1fico do pacote opencl: glxspheres64 Testar elemento gr\u00e1fico do pacote opencl utilizando a placa dedicada Nvidia: optirun glxspheres64 DICA: Para testar se o bbswitch est\u00e1 ativo: cat /proc/acpi/bbswitch DICA DE EXECU\u00c7\u00c3O: Para executar alguma aplica\u00e7\u00e3o com o uso da placa gr\u00e1fica NVIDIA: optirun nomeAplicacao","title":"NVIDIA"},{"location":"linux/arch-instalacao/#ati","text":"pacman -S xf86-video-ati","title":"ATI"},{"location":"linux/arch-instalacao/#touchpad-mouse-e-teclado-respectivamente","text":"pacman -S xf86-input-synaptics xf86-input-mouse xf86-input-keyboard","title":"touchpad, mouse e teclado, respectivamente."},{"location":"linux/arch-instalacao/#configuracao-do-sudo","text":"Editar o arquivo /etc/sudoers como abaixo: root ALL=(ALL) ALL seu-usuario ALL=(ALL) ALL","title":"Configura\u00e7\u00e3o do sudo:"},{"location":"linux/arch-instalacao/#pacotes-do-aur","text":"No arquivo /etc/pacman.conf adicione as seguintes linhas no final do arquivo: [archlinuxfr] SigLevel = Never Server = http://repo.archlinux.fr/$arch e execute: pacman -Sy yaourt","title":"Pacotes do AUR"},{"location":"linux/arch-instalacao/#pronto","text":"Finalizamos a instala\u00e7\u00e3o e configura\u00e7\u00e3o b\u00e1sica do sistema. Saia do chroot: exit Desmonte tudo relacionado a pasta /mnt e reinicie o sistema: umount -R /mnt && reboot","title":"Pronto!"},{"location":"linux/arch-nvidia/","text":"Instala\u00e7\u00e3o sudo pacman -S nvidia nvidia-libgl xorg-xrandr Config lspci | grep -E \"VGA|3D\" /etc/X11/xorg.conf Section \"Module\" Load \"modesetting\" EndSection Section \"Device\" Identifier \"nvidia\" Driver \"nvidia\" BusID \"PCI:8.0.0\" Option \"AllowEmptyInitialConfiguration\" EndSection ~/.xinitrc xrandr --setprovideroutputsource modesetting NVIDIA-0 xrandr --auto","title":"Instala\u00e7\u00e3o"},{"location":"linux/arch-nvidia/#instalacao","text":"sudo pacman -S nvidia nvidia-libgl xorg-xrandr","title":"Instala\u00e7\u00e3o"},{"location":"linux/arch-nvidia/#config","text":"lspci | grep -E \"VGA|3D\" /etc/X11/xorg.conf Section \"Module\" Load \"modesetting\" EndSection Section \"Device\" Identifier \"nvidia\" Driver \"nvidia\" BusID \"PCI:8.0.0\" Option \"AllowEmptyInitialConfiguration\" EndSection ~/.xinitrc xrandr --setprovideroutputsource modesetting NVIDIA-0 xrandr --auto","title":"Config"},{"location":"linux/arch/","text":"Preferencia IPV4 sudo sh -c \"echo 'precedence ::ffff:0:0/96 100' >> /etc/gai.conf\"","title":"Preferencia IPV4"},{"location":"linux/arch/#preferencia-ipv4","text":"sudo sh -c \"echo 'precedence ::ffff:0:0/96 100' >> /etc/gai.conf\"","title":"Preferencia IPV4"},{"location":"linux/grub/","text":"GRUB Nesse guia, utilizaremos o Grub como o gerenciador de boot, ent\u00e3o: pacman -S grub grub-efi-x86_64 efibootmgr grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=boot --recheck grub-mkconfig -o /boot/grub/grub.cfg mv boot/grubx64.efi boot/bootx64.efi efibootmgr -c -g -d /dev/sda -p 1 -w -L boot -l '\\\\EFI\\\\boot\\\\bootx64.efi' efibootmgr -n IDBOOT Encryption com GRUB /etc/mkinitcpio.conf HOOKS=(base udev autodetect keyboard keymap consolefont modconf block encrypt lvm2 filesystems fsck) /etc/default/grub GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/sda2:cryptroot\" GRUB_ENABLE_CRYPTODISK=y mkinitcpio -p linux","title":"GRUB"},{"location":"linux/grub/#grub","text":"Nesse guia, utilizaremos o Grub como o gerenciador de boot, ent\u00e3o: pacman -S grub grub-efi-x86_64 efibootmgr grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=boot --recheck grub-mkconfig -o /boot/grub/grub.cfg mv boot/grubx64.efi boot/bootx64.efi efibootmgr -c -g -d /dev/sda -p 1 -w -L boot -l '\\\\EFI\\\\boot\\\\bootx64.efi' efibootmgr -n IDBOOT","title":"GRUB"},{"location":"linux/grub/#encryption-com-grub","text":"/etc/mkinitcpio.conf HOOKS=(base udev autodetect keyboard keymap consolefont modconf block encrypt lvm2 filesystems fsck) /etc/default/grub GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/sda2:cryptroot\" GRUB_ENABLE_CRYPTODISK=y mkinitcpio -p linux","title":"Encryption com GRUB"},{"location":"linux/scrot/","text":"Scrot Screenshot da tela toda manda para ~/imagens/shots e mostra com o gpicview scrot '%Y-%m-%d-%H:%M:%S_$wx$h_screenshot.png' -e 'mv $f ~/imagens/shots/; gpicview ~/imagens/shots/$f' Seleciona a \u00e1rea com o mouse scrot -s '%Y-%m-%d-%H:%M:%S_$wx$h_screenshot.png' -e 'mv $f ~/imagens/shots/; gpicview ~/imagens/shots/$f'","title":"Scrot"},{"location":"linux/scrot/#scrot","text":"","title":"Scrot"},{"location":"linux/scrot/#screenshot-da-tela-toda","text":"manda para ~/imagens/shots e mostra com o gpicview scrot '%Y-%m-%d-%H:%M:%S_$wx$h_screenshot.png' -e 'mv $f ~/imagens/shots/; gpicview ~/imagens/shots/$f'","title":"Screenshot da tela toda"},{"location":"linux/scrot/#seleciona-a-area-com-o-mouse","text":"scrot -s '%Y-%m-%d-%H:%M:%S_$wx$h_screenshot.png' -e 'mv $f ~/imagens/shots/; gpicview ~/imagens/shots/$f'","title":"Seleciona a \u00e1rea com o mouse"},{"location":"linux/swap/","text":"Diminuindo prioridade da memoria swap Embora n\u00e3o seja obrigat\u00f3ria em micros com um volume suficiente de mem\u00f3ria RAM, a parti\u00e7\u00e3o swap \u00e9 sempre recomendada, pois permite que o sistema disponha de uma \u00e1rea adicional para situa\u00e7\u00f5es onde precisa de uma quantidade muito grande de mem\u00f3ria RAM, como por exemplo ao editar v\u00eddeos. A propens\u00e3o do sistema a utilizar mem\u00f3ria swap \u00e9 configur\u00e1vel atrav\u00e9s de uma op\u00e7\u00e3o do kernel, a \"vm.swappiness\", que aceita valores de 0 a 100, sendo que um valor baixo orienta o sistema a usar swap apenas quando n\u00e3o houver mais mem\u00f3ria dispon\u00edvel e um valor mais alto faz com que o sistema a utilize de maneira mais liberal, movendo arquivos e bibliotecas que n\u00e3o est\u00e3o sendo usados. O default na maioria das distribui\u00e7\u00f5es \u00e9 \"60\", o que faz com que o sistema use um pouco de swap mesmo quando tem mem\u00f3ria de sobra dispon\u00edvel. Voc\u00ea pode evitar isso alterando o valor para \"20\" (ou menos, de acordo com o gosto do fregu\u00eas). Para isso, execute, como root o comando: sysctl vm.swappiness=20 Para que a altera\u00e7\u00e3o se torne permanente, edite o arquivo /etc/sysctl.conf e adicione a linha \"vm.swappiness=20\". Este arquivo cont\u00e9m vari\u00e1veis para o kernel, que s\u00e3o carregadas durante o boot. Ativa e Desativa o Swap swapoff -a - desabilita \"todas\" as parti\u00e7\u00f5es swap em /etc/fstab swapon -a - habilita \"todas\" as parti\u00e7\u00f5es swap em /etc/fstab","title":"Swap"},{"location":"linux/swap/#diminuindo-prioridade-da-memoria-swap","text":"Embora n\u00e3o seja obrigat\u00f3ria em micros com um volume suficiente de mem\u00f3ria RAM, a parti\u00e7\u00e3o swap \u00e9 sempre recomendada, pois permite que o sistema disponha de uma \u00e1rea adicional para situa\u00e7\u00f5es onde precisa de uma quantidade muito grande de mem\u00f3ria RAM, como por exemplo ao editar v\u00eddeos. A propens\u00e3o do sistema a utilizar mem\u00f3ria swap \u00e9 configur\u00e1vel atrav\u00e9s de uma op\u00e7\u00e3o do kernel, a \"vm.swappiness\", que aceita valores de 0 a 100, sendo que um valor baixo orienta o sistema a usar swap apenas quando n\u00e3o houver mais mem\u00f3ria dispon\u00edvel e um valor mais alto faz com que o sistema a utilize de maneira mais liberal, movendo arquivos e bibliotecas que n\u00e3o est\u00e3o sendo usados. O default na maioria das distribui\u00e7\u00f5es \u00e9 \"60\", o que faz com que o sistema use um pouco de swap mesmo quando tem mem\u00f3ria de sobra dispon\u00edvel. Voc\u00ea pode evitar isso alterando o valor para \"20\" (ou menos, de acordo com o gosto do fregu\u00eas). Para isso, execute, como root o comando: sysctl vm.swappiness=20 Para que a altera\u00e7\u00e3o se torne permanente, edite o arquivo /etc/sysctl.conf e adicione a linha \"vm.swappiness=20\". Este arquivo cont\u00e9m vari\u00e1veis para o kernel, que s\u00e3o carregadas durante o boot.","title":"Diminuindo prioridade da memoria swap"},{"location":"linux/swap/#ativa-e-desativa-o-swap","text":"swapoff -a - desabilita \"todas\" as parti\u00e7\u00f5es swap em /etc/fstab swapon -a - habilita \"todas\" as parti\u00e7\u00f5es swap em /etc/fstab","title":"Ativa e Desativa o Swap"},{"location":"linux/syslinux/","text":"Syslinux Lembrando que o syslinux deve ser montado direto na parti\u00e7\u00e3o /boot , porque quando o syslinux for ativar o linux ele precisa ler os arquivos /boot/vmlinuz-linux e initramfs-linux.img que tem que estar disponivel antes de subir a parti\u00e7\u00e3o principal do linux que carrega simultanio quando usamos UEFI pacman -S syslinux efibootmgr mkdir -p /boot/EFI/boot cp -r /usr/lib/syslinux/efi64/* /boot/EFI/boot/ efibootmgr -c -g -d /dev/sda -p 1 -w -L boot -l '\\\\EFI\\\\boot\\\\bootx64.efi' e crio o arquivo /boot/EFI/boot/syslinux.cfg com o seguinte conteudo: PROMPT 0 DEFAULT arch LABEL arch LINUX ../../vmlinuz-linux APPEND root=/dev/sda2 rw INITRD ../../initramfs-linux.img Caso tenha a parti\u00e7\u00e3o cryptografada use o seguinte conteudo no APPEND: APPEND root=/dev/mapper/cryptroot cryptdevice=/dev/sda2:cryptroot rw","title":"Syslinux"},{"location":"linux/syslinux/#syslinux","text":"Lembrando que o syslinux deve ser montado direto na parti\u00e7\u00e3o /boot , porque quando o syslinux for ativar o linux ele precisa ler os arquivos /boot/vmlinuz-linux e initramfs-linux.img que tem que estar disponivel antes de subir a parti\u00e7\u00e3o principal do linux que carrega simultanio quando usamos UEFI pacman -S syslinux efibootmgr mkdir -p /boot/EFI/boot cp -r /usr/lib/syslinux/efi64/* /boot/EFI/boot/ efibootmgr -c -g -d /dev/sda -p 1 -w -L boot -l '\\\\EFI\\\\boot\\\\bootx64.efi' e crio o arquivo /boot/EFI/boot/syslinux.cfg com o seguinte conteudo: PROMPT 0 DEFAULT arch LABEL arch LINUX ../../vmlinuz-linux APPEND root=/dev/sda2 rw INITRD ../../initramfs-linux.img Caso tenha a parti\u00e7\u00e3o cryptografada use o seguinte conteudo no APPEND: APPEND root=/dev/mapper/cryptroot cryptdevice=/dev/sda2:cryptroot rw","title":"Syslinux"},{"location":"linux/ubuntu/","text":"Alterar Usu\u00e1rio do arquivo sudo chown root:root [file] Atalhos Desktop Pasta adicionar os .desktop na pasta /usr/share/applications/ Example de arquivo [Desktop Entry] Name=Steam Comment=Application for managing and playing games on Steam Exec=/usr/bin/steam %U Icon=steam Terminal=false Type=Application Categories=Network;FileTransfer;Game; MimeType=x-scheme-handler/steam; Actions=Store;Community;Library;Servers;Screenshots;News;Settings;BigPicture;Friends; Pesquisar por processos existentes ps -ef | grep [pesquisa] Matar processos kill [idProcesso^] Para gravar ISO em pendrive: dd if=/local/da/imagem.iso of=/dev/sd* Preferencia IPV4 sudo sh -c \"echo 'precedence ::ffff:0:0/96 100' >> /etc/gai.conf\"","title":"Alterar Usu\u00e1rio do arquivo"},{"location":"linux/ubuntu/#alterar-usuario-do-arquivo","text":"sudo chown root:root [file]","title":"Alterar Usu\u00e1rio do arquivo"},{"location":"linux/ubuntu/#atalhos-desktop","text":"Pasta adicionar os .desktop na pasta /usr/share/applications/ Example de arquivo [Desktop Entry] Name=Steam Comment=Application for managing and playing games on Steam Exec=/usr/bin/steam %U Icon=steam Terminal=false Type=Application Categories=Network;FileTransfer;Game; MimeType=x-scheme-handler/steam; Actions=Store;Community;Library;Servers;Screenshots;News;Settings;BigPicture;Friends;","title":"Atalhos Desktop"},{"location":"linux/ubuntu/#pesquisar-por-processos-existentes","text":"ps -ef | grep [pesquisa]","title":"Pesquisar por processos existentes"},{"location":"linux/ubuntu/#matar-processos","text":"kill [idProcesso^]","title":"Matar processos"},{"location":"linux/ubuntu/#para-gravar-iso-em-pendrive","text":"dd if=/local/da/imagem.iso of=/dev/sd*","title":"Para gravar ISO em pendrive:"},{"location":"linux/ubuntu/#preferencia-ipv4","text":"sudo sh -c \"echo 'precedence ::ffff:0:0/96 100' >> /etc/gai.conf\"","title":"Preferencia IPV4"},{"location":"php/composer/","text":"Composer TimeOut composer --global config process-timeout 2000","title":"Composer"},{"location":"php/composer/#composer-timeout","text":"composer --global config process-timeout 2000","title":"Composer TimeOut"},{"location":"php/doctrine/","text":"Commands Prefixo instalado via composer: php vendor/bin/doctrine * orm:schema-tool:create - Create database orm:schema-tool:drop --force - Delete database orm:schema:update --dump-sql - Dump or update modifications orm:validate-schema - Validate Entity with DataBase orm:convert-mapping --force --from-database annotation [path] - Generate entities by database orm:generate-entities [path] --generate-annotations=true - Update entities and generate entities with annotations, get and set Persisting Usage - Persisting objects $user1 = new User(); $user1->setFullName('MyName'); $em->persist($user1); $user2 = new User(); $user2->setFullName('MyName2'); $em->persist($user2); $em->flush(); - Updating an object $user = $em->find('User', 1); $user->setName('MyName'); $em->flush(); - Deleting an object $user = $em->find('User', 1); $em->remove($user); $em->flush(); Retrieving an object - Repositories Single user by id $user1 = $em->find('User', 1); $user2 = $em->getRepository('User')->find(1); Single user by name and type. $user = $em->getRepository('User')->findOneBy( array('name' => 'MyName', 'type' => 'MyType')); Single user by its Name $user = $em->getRepository('User')->findOneByName('MyName'); Find All users $users = $em->getRepository('User')->findAll(); Group users by type $users = $em->getRepository('User')->findByType('MyType'); Group users by criteria, order, limit, offset. $users = $em->getRepository('User')->findBy( array('name' => 'MyName'), array('id' => 'ASC'), 10, 0); - DQL - Query Builder Example BETWEEN $queryBuilder = $em->createQueryBuilder(); $queryBuilder->select('n') ->from(Example\\Entity::class, 'n') ->where('n.date BETWEEN :from AND :to') $queryBuilder->setParameters([ 'from' => $from, 'to' => $to ]); $result = $queryBuilder->getQuery()->fetchAll(); Associations - One to One Mapping One to One use Doctrine\\ORM\\Mapping as ORM; /** * @ORM\\Entity * @ORM\\Table(name=\"user\") */ class User { /** * @ORM\\OneToOne(targetEntity=\"Entity\\Role\", mappedBy=\"role\", cascade={\"persist\"}) */ protected $role; } /** * @ORM\\Entity * @ORM\\Table(name=\"role\") */ class Role { /** * @ORM\\OneToOne(targetEntity=\"Entity\\User\", inversedBy=\"role\", cascade={\"persist\"}) * @ORM\\JoinColumn(name=\"userId\", referencedColumnName=\"id\", unique=false, nullable=false) */ protected $user; } Usage example One to One //persist $user = new Entity\\User(); $user->setEmail('email'); $user->setName('name'); $role = new Entity\\Role; $role->setName('name'); $role->setUser($user); $user->setRole($role); $em->persist($user); $em->flush(); //retrieving $user = $em->find('User', $user->getId()); $user->getRole(); - One to Many Mapping One to Many use Doctrine\\ORM\\Mapping as ORM; /** * @ORM\\Entity * @ORM\\Table(name=\"user\") */ class User { /** * @ORM\\OneToMany(targetEntity=\"Comment\", mappedBy=\"user\", cascade={\"persist\"}) */ protected $comments; public function __construct() { $this->comments = new \\Doctrine\\Common\\Collections\\ArrayCollection(); } } /** * @ORM\\Entity * @ORM\\Table(name=\"comment\") */ class Comment { /** * @ORM\\ManyToOne(targetEntity=\"User\", inversedBy=\"comments\", cascade={\"persist\"}) * @ORM\\JoinColumn(name=\"userId\", referencedColumnName=\"id\", unique=false, nullable=false) */ protected $user; } Usage example One to Many //persist $user = new Entity\\User(); $user->setEmail('email'); $user->setName('name'); $comment1 = new Entity\\Comment; $comment1->setCommentText('comment1'); $comment1->setUser($user); $comment2 = new Entity\\Comment; $comment2->setCommentText('comment2'); $comment2->setUser($user); $user->getComments()->add($comment2); $user->getComments()->add($comment1); $em->persist($user); $em->flush(); //retrieving $user = $em->find('User', $user->getId()); $user->getComments()->toArray(); Mapping One to Many Self Ref class Comment { /** * @ORM\\OneToMany(targetEntity=\"Comment\", mappedBy=\"parent\", cascade={\"persist\"}) */ protected $children; /** * @ORM\\ManyToOne(targetEntity=\"Comment\", inversedBy=\"children\", cascade={\"persist\"}) * @ORM\\JoinColumn(name=\"parentId\", referencedColumnName=\"id\", unique=false, nullable=true) */ protected $parent; public function __construct() { $this->children = new \\Doctrine\\Common\\Collections\\ArrayCollection(); } } Usage example One to Many Self Ref // persisting $comment2 = new Entity\\Comment; $comment2->setCommentText('parent'); $comment1 = new Entity\\Comment; $comment1->setCommentText('children1'); $comment1->setParent($comment2); $comment3 = new Entity\\Comment; $comment3->setCommentText('children2'); $comment3->setParent($comment2); $comment2->getChildrens()->add($comment1); $comment2->getChildrens()->add($comment3); $em->persist($comment2); $em->flush(); //retrieving $comment = $em->find('Comment', $comment2->getId()); $comment->getChildrens(); - Many to Many Mapping Many to Many use Doctrine\\ORM\\Mapping as ORM; /** * @ORM\\Entity * @ORM\\Table(name=\"user\") */ class User { /** * @ORM\\ManyToMany(targetEntity=\"Category\", inversedBy=\"users\", cascade={\"persist\"}) * @ORM\\JoinColumn(name=\"categoryId\", referencedColumnName=\"id\", unique=false, nullable=true) */ protected $categories; public function __construct() { $this->categories = new \\Doctrine\\Common\\Collections\\ArrayCollection(); } } /** * @ORM\\Entity * @ORM\\Table(name=\"category\") */ class Category { /** * @ORM\\ManyToMany(targetEntity=\"User\", mappedBy=\"categories\", cascade={\"persist\"}) */ protected $users; public function __construct() { $this->users = new \\Doctrine\\Common\\Collections\\ArrayCollection(); } } Usage example Many to Many // persisting $user1 = new Entity\\User(); $user1->setEmail('email'); $user1->setName('Plumber Builder'); $user2 = new Entity\\User; $user2->setEmail('email'); $user2->setName('Plaster Builder'); $categoryPlumber = new Entity\\Category; $categoryPlumber->setName('Plumber Category'); $categoryBeer_Drinkers = new Entity\\Category; $categoryBeer_Drinkers->setName('Beer_Drinkers Category'); $categoryPlumber->getUsers()->add($user1); $categoryBeer_Drinkers->getUsers()->add($user2); $categoryBeer_Drinkers->getUsers()->add($user1); $user1->getCategories()->add($categoryPlumber); $user1->getCategories()->add($categoryBeer_Drinkers); $user2->getCategories()->add($categoryBeer_Drinkers); $em->persist($user1); $em->persist($user2); $em->flush(); //retrieving $user1 = $em->find('User', $user1->getId()); //get last categories for user1 $user1->getCategories()->toArray()); //get last category(Beer_Drinkers Category) and all users for this category $user1->getCategories()->last()->getUsers()->toArray(); Lifecycle callbacks Annotation which has to be set on the entity-class PHP DocBlock to notify Doctrine that this entity has entity lifecycle callback annotations set on at least one of its methods. Using @PostLoad, @PrePersist, @PostPersist, @PreRemove, @PostRemove, @PreUpdate or @PostUpdate without this marker annotation will make Doctrine ignore the callbacks. use Doctrine\\ORM\\Mapping as ORM; /** * @ORM\\MappedSuperclass * @ORM\\HasLifecycleCallbacks */ abstract class AbstractEntity { /** * @ORM\\Column(name=\"updated_at\", type=\"datetime\") */ private $updatedAt; /** * @ORM\\PrePersist() * @ORM\\PreUpdate */ public function preUpdated() { $this->updated = new \\DateTime(); } /** * @PostPersist */ public function sendOptinMail() {} } /** * @ORM\\Entity * @ORM\\Table(name=\"user\") */ class User extends Abstract { // [...] } Custom Repository Entity mapping for repository class use Doctrine\\ORM\\Mapping as ORM; /** * @ORM\\Entity(repositoryClass=\"Repository\\Comment\") */ class Comment { // [...] } //repository Class use Doctrine\\ORM\\EntityRepository; class Comment extends EntityRepository { public function findUserComments($userId) { $query = $this->_em->createQuery(\"SELECT u FROM Entity\\Comment u WHERE u.userId = :userId\"); $query->setParameters(array('userId' => $userId)); return $query->getResult(); } } In controller $repository = $em->getRepository(Entity\\Comment::class); $comments = $repository->findUserComments(10); Zend Hydrator use Doctrine\\ORM\\Mapping as ORM; use Zend\\Hydrator; /** * @ORM\\Entity * @ORM\\Table(name=\"user\") */ class User { // [...] public function hydrator(array $options) : User { $hydrator = new Hydrator\\ClassMethods(); $hydrator->hydrate($options, $this); return $this; } public function extract() : array { $hydrator = new Hydrator\\ClassMethods(); return $hydrator->extract($this); } } My Entities - Abstract Entity namespace Core\\Entity; use Doctrine\\ORM\\Mapping as ORM; use Zend\\Hydrator; /** * @author Jhon Mike <developer@jhonmike.com.br> * * @ORM\\MappedSuperclass * @ORM\\HasLifecycleCallbacks */ abstract class AbstractEntity { /** * @ORM\\Id * @ORM\\Column(type=\"integer\", nullable=false) * @ORM\\GeneratedValue(strategy=\"IDENTITY\") */ private $id; /** * @ORM\\Column(type=\"datetime\", nullable=false) */ private $created; /** * @ORM\\Column(type=\"datetime\", nullable=false) */ private $updated; public function getId() : int { return $this->id; } public function getCreated() : DateTime { return $this->created; } /** * @ORM\\PrePersist */ public function setCreated() { $this->created = new \\DateTime(); } public function getUpdated() : DateTime { return $this->updated; } /** * @ORM\\PrePersist * @ORM\\PreUpdate */ public function setUpdated() { $this->updated = new \\DateTime(); } public function hydrator(array $options) : Role { $hydrator = new Hydrator\\ClassMethods(); $hydrator->hydrate($options, $this); return $this; } public function toArray() : array { $hydrator = new Hydrator\\ClassMethods(); return $hydrator->extract($this); } } - Snippet Entity namespace App\\Entity; use Core\\Entity\\AbstractEntity; use Doctrine\\ORM\\Mapping as ORM; /** * @author Jhon Mike <developer@jhonmike.com.br> * * @ORM\\Entity * @ORM\\Table(name=\"role\") */ class Role extends AbstractEntity { /** * @ORM\\Column(type=\"string\", length=100, nullable=false) */ private $name; public function setName(string $name) : Role { $this->name = $name; return $this; } public function getName() : string { return $this->name; } } - Snippet Entity Clean namespace App\\Entity; use DateTime; use Doctrine\\ORM\\Mapping as ORM; use Zend\\Hydrator; use Zend\\Math\\Rand; /** * @author Jhon Mike <developer@jhonmike.com.br> * * @ORM\\Entity * @ORM\\Table(name=\"role\") * @ORM\\HasLifecycleCallbacks */ class Role { /** * @ORM\\Id * @ORM\\Column(type=\"integer\", nullable=false) * @ORM\\GeneratedValue(strategy=\"IDENTITY\") */ private $id; /** * @ORM\\Column(type=\"string\", length=100, nullable=false) */ private $name; /** * @ORM\\Column(type=\"datetime\", nullable=false) */ private $created; /** * @ORM\\Column(type=\"datetime\", nullable=false) */ private $updated; public function getId() : int { return $this->id; } public function setName(string $name) : Role { $this->name = $name; return $this; } public function getName() : string { return $this->name; } public function getCreated() : DateTime { return $this->created; } /** * @ORM\\PrePersist */ public function preCreated() { $this->created = new \\DateTime(); } public function getUpdated() : DateTime { return $this->updated; } /** * @ORM\\PrePersist * @ORM\\PreUpdate */ public function preUpdated() { $this->updated = new \\DateTime(); } public function hydrator(array $options) : Role { $hydrator = new Hydrator\\ClassMethods(); $hydrator->hydrate($options, $this); return $this; } public function toArray() : array { $hydrator = new Hydrator\\ClassMethods(); return $hydrator->extract($this); } }","title":"Commands"},{"location":"php/doctrine/#commands","text":"Prefixo instalado via composer: php vendor/bin/doctrine * orm:schema-tool:create - Create database orm:schema-tool:drop --force - Delete database orm:schema:update --dump-sql - Dump or update modifications orm:validate-schema - Validate Entity with DataBase orm:convert-mapping --force --from-database annotation [path] - Generate entities by database orm:generate-entities [path] --generate-annotations=true - Update entities and generate entities with annotations, get and set","title":"Commands"},{"location":"php/doctrine/#persisting-usage","text":"","title":"Persisting Usage"},{"location":"php/doctrine/#-persisting-objects","text":"$user1 = new User(); $user1->setFullName('MyName'); $em->persist($user1); $user2 = new User(); $user2->setFullName('MyName2'); $em->persist($user2); $em->flush();","title":"- Persisting objects"},{"location":"php/doctrine/#-updating-an-object","text":"$user = $em->find('User', 1); $user->setName('MyName'); $em->flush();","title":"- Updating an object"},{"location":"php/doctrine/#-deleting-an-object","text":"$user = $em->find('User', 1); $em->remove($user); $em->flush();","title":"- Deleting an object"},{"location":"php/doctrine/#retrieving-an-object","text":"","title":"Retrieving an object"},{"location":"php/doctrine/#-repositories","text":"","title":"- Repositories"},{"location":"php/doctrine/#single-user-by-id","text":"$user1 = $em->find('User', 1); $user2 = $em->getRepository('User')->find(1);","title":"Single user by id"},{"location":"php/doctrine/#single-user-by-name-and-type","text":"$user = $em->getRepository('User')->findOneBy( array('name' => 'MyName', 'type' => 'MyType'));","title":"Single user by name and type."},{"location":"php/doctrine/#single-user-by-its-name","text":"$user = $em->getRepository('User')->findOneByName('MyName');","title":"Single user by its Name"},{"location":"php/doctrine/#find-all-users","text":"$users = $em->getRepository('User')->findAll();","title":"Find All users"},{"location":"php/doctrine/#group-users-by-type","text":"$users = $em->getRepository('User')->findByType('MyType');","title":"Group users by type"},{"location":"php/doctrine/#group-users-by-criteria-order-limit-offset","text":"$users = $em->getRepository('User')->findBy( array('name' => 'MyName'), array('id' => 'ASC'), 10, 0);","title":"Group users by criteria, order, limit, offset."},{"location":"php/doctrine/#-dql","text":"","title":"- DQL"},{"location":"php/doctrine/#-query-builder","text":"","title":"- Query Builder"},{"location":"php/doctrine/#example-between","text":"$queryBuilder = $em->createQueryBuilder(); $queryBuilder->select('n') ->from(Example\\Entity::class, 'n') ->where('n.date BETWEEN :from AND :to') $queryBuilder->setParameters([ 'from' => $from, 'to' => $to ]); $result = $queryBuilder->getQuery()->fetchAll();","title":"Example BETWEEN"},{"location":"php/doctrine/#associations","text":"","title":"Associations"},{"location":"php/doctrine/#-one-to-one","text":"","title":"- One to One"},{"location":"php/doctrine/#mapping-one-to-one","text":"use Doctrine\\ORM\\Mapping as ORM; /** * @ORM\\Entity * @ORM\\Table(name=\"user\") */ class User { /** * @ORM\\OneToOne(targetEntity=\"Entity\\Role\", mappedBy=\"role\", cascade={\"persist\"}) */ protected $role; } /** * @ORM\\Entity * @ORM\\Table(name=\"role\") */ class Role { /** * @ORM\\OneToOne(targetEntity=\"Entity\\User\", inversedBy=\"role\", cascade={\"persist\"}) * @ORM\\JoinColumn(name=\"userId\", referencedColumnName=\"id\", unique=false, nullable=false) */ protected $user; }","title":"Mapping One to One"},{"location":"php/doctrine/#usage-example-one-to-one","text":"//persist $user = new Entity\\User(); $user->setEmail('email'); $user->setName('name'); $role = new Entity\\Role; $role->setName('name'); $role->setUser($user); $user->setRole($role); $em->persist($user); $em->flush(); //retrieving $user = $em->find('User', $user->getId()); $user->getRole();","title":"Usage example One to One"},{"location":"php/doctrine/#-one-to-many","text":"","title":"- One to Many"},{"location":"php/doctrine/#mapping-one-to-many","text":"use Doctrine\\ORM\\Mapping as ORM; /** * @ORM\\Entity * @ORM\\Table(name=\"user\") */ class User { /** * @ORM\\OneToMany(targetEntity=\"Comment\", mappedBy=\"user\", cascade={\"persist\"}) */ protected $comments; public function __construct() { $this->comments = new \\Doctrine\\Common\\Collections\\ArrayCollection(); } } /** * @ORM\\Entity * @ORM\\Table(name=\"comment\") */ class Comment { /** * @ORM\\ManyToOne(targetEntity=\"User\", inversedBy=\"comments\", cascade={\"persist\"}) * @ORM\\JoinColumn(name=\"userId\", referencedColumnName=\"id\", unique=false, nullable=false) */ protected $user; }","title":"Mapping One to Many"},{"location":"php/doctrine/#usage-example-one-to-many","text":"//persist $user = new Entity\\User(); $user->setEmail('email'); $user->setName('name'); $comment1 = new Entity\\Comment; $comment1->setCommentText('comment1'); $comment1->setUser($user); $comment2 = new Entity\\Comment; $comment2->setCommentText('comment2'); $comment2->setUser($user); $user->getComments()->add($comment2); $user->getComments()->add($comment1); $em->persist($user); $em->flush(); //retrieving $user = $em->find('User', $user->getId()); $user->getComments()->toArray();","title":"Usage example One to Many"},{"location":"php/doctrine/#mapping-one-to-many-self-ref","text":"class Comment { /** * @ORM\\OneToMany(targetEntity=\"Comment\", mappedBy=\"parent\", cascade={\"persist\"}) */ protected $children; /** * @ORM\\ManyToOne(targetEntity=\"Comment\", inversedBy=\"children\", cascade={\"persist\"}) * @ORM\\JoinColumn(name=\"parentId\", referencedColumnName=\"id\", unique=false, nullable=true) */ protected $parent; public function __construct() { $this->children = new \\Doctrine\\Common\\Collections\\ArrayCollection(); } }","title":"Mapping One to Many Self Ref"},{"location":"php/doctrine/#usage-example-one-to-many-self-ref","text":"// persisting $comment2 = new Entity\\Comment; $comment2->setCommentText('parent'); $comment1 = new Entity\\Comment; $comment1->setCommentText('children1'); $comment1->setParent($comment2); $comment3 = new Entity\\Comment; $comment3->setCommentText('children2'); $comment3->setParent($comment2); $comment2->getChildrens()->add($comment1); $comment2->getChildrens()->add($comment3); $em->persist($comment2); $em->flush(); //retrieving $comment = $em->find('Comment', $comment2->getId()); $comment->getChildrens();","title":"Usage example One to Many Self Ref"},{"location":"php/doctrine/#-many-to-many","text":"","title":"- Many to Many"},{"location":"php/doctrine/#mapping-many-to-many","text":"use Doctrine\\ORM\\Mapping as ORM; /** * @ORM\\Entity * @ORM\\Table(name=\"user\") */ class User { /** * @ORM\\ManyToMany(targetEntity=\"Category\", inversedBy=\"users\", cascade={\"persist\"}) * @ORM\\JoinColumn(name=\"categoryId\", referencedColumnName=\"id\", unique=false, nullable=true) */ protected $categories; public function __construct() { $this->categories = new \\Doctrine\\Common\\Collections\\ArrayCollection(); } } /** * @ORM\\Entity * @ORM\\Table(name=\"category\") */ class Category { /** * @ORM\\ManyToMany(targetEntity=\"User\", mappedBy=\"categories\", cascade={\"persist\"}) */ protected $users; public function __construct() { $this->users = new \\Doctrine\\Common\\Collections\\ArrayCollection(); } }","title":"Mapping Many to Many"},{"location":"php/doctrine/#usage-example-many-to-many","text":"// persisting $user1 = new Entity\\User(); $user1->setEmail('email'); $user1->setName('Plumber Builder'); $user2 = new Entity\\User; $user2->setEmail('email'); $user2->setName('Plaster Builder'); $categoryPlumber = new Entity\\Category; $categoryPlumber->setName('Plumber Category'); $categoryBeer_Drinkers = new Entity\\Category; $categoryBeer_Drinkers->setName('Beer_Drinkers Category'); $categoryPlumber->getUsers()->add($user1); $categoryBeer_Drinkers->getUsers()->add($user2); $categoryBeer_Drinkers->getUsers()->add($user1); $user1->getCategories()->add($categoryPlumber); $user1->getCategories()->add($categoryBeer_Drinkers); $user2->getCategories()->add($categoryBeer_Drinkers); $em->persist($user1); $em->persist($user2); $em->flush(); //retrieving $user1 = $em->find('User', $user1->getId()); //get last categories for user1 $user1->getCategories()->toArray()); //get last category(Beer_Drinkers Category) and all users for this category $user1->getCategories()->last()->getUsers()->toArray();","title":"Usage example Many to Many"},{"location":"php/doctrine/#lifecycle-callbacks","text":"Annotation which has to be set on the entity-class PHP DocBlock to notify Doctrine that this entity has entity lifecycle callback annotations set on at least one of its methods. Using @PostLoad, @PrePersist, @PostPersist, @PreRemove, @PostRemove, @PreUpdate or @PostUpdate without this marker annotation will make Doctrine ignore the callbacks. use Doctrine\\ORM\\Mapping as ORM; /** * @ORM\\MappedSuperclass * @ORM\\HasLifecycleCallbacks */ abstract class AbstractEntity { /** * @ORM\\Column(name=\"updated_at\", type=\"datetime\") */ private $updatedAt; /** * @ORM\\PrePersist() * @ORM\\PreUpdate */ public function preUpdated() { $this->updated = new \\DateTime(); } /** * @PostPersist */ public function sendOptinMail() {} } /** * @ORM\\Entity * @ORM\\Table(name=\"user\") */ class User extends Abstract { // [...] }","title":"Lifecycle callbacks"},{"location":"php/doctrine/#custom-repository","text":"Entity mapping for repository class use Doctrine\\ORM\\Mapping as ORM; /** * @ORM\\Entity(repositoryClass=\"Repository\\Comment\") */ class Comment { // [...] } //repository Class use Doctrine\\ORM\\EntityRepository; class Comment extends EntityRepository { public function findUserComments($userId) { $query = $this->_em->createQuery(\"SELECT u FROM Entity\\Comment u WHERE u.userId = :userId\"); $query->setParameters(array('userId' => $userId)); return $query->getResult(); } } In controller $repository = $em->getRepository(Entity\\Comment::class); $comments = $repository->findUserComments(10);","title":"Custom Repository"},{"location":"php/doctrine/#zend-hydrator","text":"use Doctrine\\ORM\\Mapping as ORM; use Zend\\Hydrator; /** * @ORM\\Entity * @ORM\\Table(name=\"user\") */ class User { // [...] public function hydrator(array $options) : User { $hydrator = new Hydrator\\ClassMethods(); $hydrator->hydrate($options, $this); return $this; } public function extract() : array { $hydrator = new Hydrator\\ClassMethods(); return $hydrator->extract($this); } }","title":"Zend Hydrator"},{"location":"php/doctrine/#my-entities","text":"","title":"My Entities"},{"location":"php/doctrine/#-abstract-entity","text":"namespace Core\\Entity; use Doctrine\\ORM\\Mapping as ORM; use Zend\\Hydrator; /** * @author Jhon Mike <developer@jhonmike.com.br> * * @ORM\\MappedSuperclass * @ORM\\HasLifecycleCallbacks */ abstract class AbstractEntity { /** * @ORM\\Id * @ORM\\Column(type=\"integer\", nullable=false) * @ORM\\GeneratedValue(strategy=\"IDENTITY\") */ private $id; /** * @ORM\\Column(type=\"datetime\", nullable=false) */ private $created; /** * @ORM\\Column(type=\"datetime\", nullable=false) */ private $updated; public function getId() : int { return $this->id; } public function getCreated() : DateTime { return $this->created; } /** * @ORM\\PrePersist */ public function setCreated() { $this->created = new \\DateTime(); } public function getUpdated() : DateTime { return $this->updated; } /** * @ORM\\PrePersist * @ORM\\PreUpdate */ public function setUpdated() { $this->updated = new \\DateTime(); } public function hydrator(array $options) : Role { $hydrator = new Hydrator\\ClassMethods(); $hydrator->hydrate($options, $this); return $this; } public function toArray() : array { $hydrator = new Hydrator\\ClassMethods(); return $hydrator->extract($this); } }","title":"- Abstract Entity"},{"location":"php/doctrine/#-snippet-entity","text":"namespace App\\Entity; use Core\\Entity\\AbstractEntity; use Doctrine\\ORM\\Mapping as ORM; /** * @author Jhon Mike <developer@jhonmike.com.br> * * @ORM\\Entity * @ORM\\Table(name=\"role\") */ class Role extends AbstractEntity { /** * @ORM\\Column(type=\"string\", length=100, nullable=false) */ private $name; public function setName(string $name) : Role { $this->name = $name; return $this; } public function getName() : string { return $this->name; } }","title":"- Snippet Entity"},{"location":"php/doctrine/#-snippet-entity-clean","text":"namespace App\\Entity; use DateTime; use Doctrine\\ORM\\Mapping as ORM; use Zend\\Hydrator; use Zend\\Math\\Rand; /** * @author Jhon Mike <developer@jhonmike.com.br> * * @ORM\\Entity * @ORM\\Table(name=\"role\") * @ORM\\HasLifecycleCallbacks */ class Role { /** * @ORM\\Id * @ORM\\Column(type=\"integer\", nullable=false) * @ORM\\GeneratedValue(strategy=\"IDENTITY\") */ private $id; /** * @ORM\\Column(type=\"string\", length=100, nullable=false) */ private $name; /** * @ORM\\Column(type=\"datetime\", nullable=false) */ private $created; /** * @ORM\\Column(type=\"datetime\", nullable=false) */ private $updated; public function getId() : int { return $this->id; } public function setName(string $name) : Role { $this->name = $name; return $this; } public function getName() : string { return $this->name; } public function getCreated() : DateTime { return $this->created; } /** * @ORM\\PrePersist */ public function preCreated() { $this->created = new \\DateTime(); } public function getUpdated() : DateTime { return $this->updated; } /** * @ORM\\PrePersist * @ORM\\PreUpdate */ public function preUpdated() { $this->updated = new \\DateTime(); } public function hydrator(array $options) : Role { $hydrator = new Hydrator\\ClassMethods(); $hydrator->hydrate($options, $this); return $this; } public function toArray() : array { $hydrator = new Hydrator\\ClassMethods(); return $hydrator->extract($this); } }","title":"- Snippet Entity Clean"},{"location":"php/php/","text":"PHP Arch sudo pacman -S php php-gd php-intl php-pgsql php-mcrypt php-imap php-sqlite php-memcache DateTime new \\DateTime(); Add dias no objeto $date->add(new \\DateInterval('P1D'));","title":"Php"},{"location":"php/php/#php-arch","text":"sudo pacman -S php php-gd php-intl php-pgsql php-mcrypt php-imap php-sqlite php-memcache","title":"PHP Arch"},{"location":"php/php/#datetime","text":"new \\DateTime();","title":"DateTime"},{"location":"php/php/#add-dias-no-objeto","text":"$date->add(new \\DateInterval('P1D'));","title":"Add dias no objeto"},{"location":"php/phpunit/","text":"Mock Prophesize Example: $gateway = $this->prophesize(Example\\Gateway::class); $gateway->findAllExampleEntity(\\Prophecy\\Argument::any())->willReturn([$entity1, $entity2]); $service = new Example\\Service($gateway->reveal()); // \\Prophecy\\Argument::type(\\Fiscal\\Model\\NFE::class) <-- type MockBuilder Example: $gateway = $this->getMockBuilder(DownloadGateway::class) ->setConstructorArgs([]) ->setMethods(['getNFEByNumber']) ->getMock(); $gateway->expects($this->once()) ->method('getNFEByNumber') ->willReturn([$nfe1, $nfe2]); Mock que valida se entro no metodo e quais foram os parametros passados $gateway = $this->getMockBuilder(NFEGateway::class) ->setMethods(['findNFEsByEmissorAndModelAndDates']) ->disableOriginalConstructor() ->getMock(); $gateway->expects($this->once()) ->method('findNFEsByEmissorAndModelAndDates') ->with( $this->identicalTo($emissor), $this->identicalTo($params['modelo']), $this->callback(function ($from) { return $from === '2016-11-01'; }), $this->callback(function ($to) { return $to === '2016-11-10'; }), $this->identicalTo(20), $this->identicalTo(0) ) ->willReturn([]); Exception /** * @expectedException MyException * @expectedExceptionCode 20 * @expectedExceptionMessage Some Message */ public function testExceptionHasErrorcode20() { throw new MyException('Some Message', 20); }","title":"Mock"},{"location":"php/phpunit/#mock","text":"","title":"Mock"},{"location":"php/phpunit/#prophesize","text":"Example: $gateway = $this->prophesize(Example\\Gateway::class); $gateway->findAllExampleEntity(\\Prophecy\\Argument::any())->willReturn([$entity1, $entity2]); $service = new Example\\Service($gateway->reveal()); // \\Prophecy\\Argument::type(\\Fiscal\\Model\\NFE::class) <-- type","title":"Prophesize"},{"location":"php/phpunit/#mockbuilder","text":"Example: $gateway = $this->getMockBuilder(DownloadGateway::class) ->setConstructorArgs([]) ->setMethods(['getNFEByNumber']) ->getMock(); $gateway->expects($this->once()) ->method('getNFEByNumber') ->willReturn([$nfe1, $nfe2]); Mock que valida se entro no metodo e quais foram os parametros passados $gateway = $this->getMockBuilder(NFEGateway::class) ->setMethods(['findNFEsByEmissorAndModelAndDates']) ->disableOriginalConstructor() ->getMock(); $gateway->expects($this->once()) ->method('findNFEsByEmissorAndModelAndDates') ->with( $this->identicalTo($emissor), $this->identicalTo($params['modelo']), $this->callback(function ($from) { return $from === '2016-11-01'; }), $this->callback(function ($to) { return $to === '2016-11-10'; }), $this->identicalTo(20), $this->identicalTo(0) ) ->willReturn([]);","title":"MockBuilder"},{"location":"php/phpunit/#exception","text":"/** * @expectedException MyException * @expectedExceptionCode 20 * @expectedExceptionMessage Some Message */ public function testExceptionHasErrorcode20() { throw new MyException('Some Message', 20); }","title":"Exception"},{"location":"php/zend/","text":"","title":"Zend"},{"location":"terminais/tmux/","text":"TMUX quando ler <Prefix> ser\u00e1 o padr\u00e3o Ctrl + b Window <Prefix> c => para criar uma nova 'window' <Prefix> % => para dividir uma 'window' verticalmente <Prefix> \" => para dividir uma 'window' horizontalmente <Prefix> & => para fechar uma 'window' <Prefix> . => move a window para algum indice ainda n\u00e3o utilizado <Prefix> 0 a 9 => abre a 'window' com o numero digitado <Prefix> w => abre a 'window' a partir de uma lista <Prefix> n => (next) abre a pr\u00f3xima 'window' <Prefix> p => (previous) abre a 'window' anterior Pane (split window) <Prefix> x => para fechar uma 'pane', pergunta de confirma\u00e7\u00e3o <Prefix> ! => para fechar uma 'pane', SEM pergunta de confirma\u00e7\u00e3o <Prefix> o => para ir para a proxima 'pane' <Prefix> Up ou Left ou Right ou Down => para ir para a 'pane' 'apontada' <Prefix> z => maximiza a 'pane' atual, se executar novamente volta a exibir as outras <Prefix> { ou } => mover 'pane' de lugar <Prefix> ; => alterana para a ultima pane <Prefix> Alt(segura) setas; => redimensiona o tamanho da pane Commands <Prefix> : => para digitar o comando a ser executado, ex: 'kill-window' <Prefix> f => procura o termo em todas as 'window' e 'panes' <Prefix> d => 'destaca' da sess\u00e3o, mas mantem a sess\u00e3o aberta <Prefix> ? => exibe uma lista de comandos que podem ser utilizados Sessions para listar sess\u00f5es: tmux list-sessions para retornar a uma sess\u00e3o aberta: tmux attach -t 0 #=> Ou o nome da sess\u00e3o para destruir uma session: tmux kill-session -t 0 #=> Ou o nome da sess\u00e3o para destruir TODAS as sess\u00f5es abertas: tmux kill-server para criar uma nova sess\u00e3o (new-session ou alias new): tmux new -s nome-da-sess","title":"TMUX"},{"location":"terminais/tmux/#tmux","text":"quando ler <Prefix> ser\u00e1 o padr\u00e3o Ctrl + b","title":"TMUX"},{"location":"terminais/tmux/#window","text":"<Prefix> c => para criar uma nova 'window' <Prefix> % => para dividir uma 'window' verticalmente <Prefix> \" => para dividir uma 'window' horizontalmente <Prefix> & => para fechar uma 'window' <Prefix> . => move a window para algum indice ainda n\u00e3o utilizado <Prefix> 0 a 9 => abre a 'window' com o numero digitado <Prefix> w => abre a 'window' a partir de uma lista <Prefix> n => (next) abre a pr\u00f3xima 'window' <Prefix> p => (previous) abre a 'window' anterior","title":"Window"},{"location":"terminais/tmux/#pane-split-window","text":"<Prefix> x => para fechar uma 'pane', pergunta de confirma\u00e7\u00e3o <Prefix> ! => para fechar uma 'pane', SEM pergunta de confirma\u00e7\u00e3o <Prefix> o => para ir para a proxima 'pane' <Prefix> Up ou Left ou Right ou Down => para ir para a 'pane' 'apontada' <Prefix> z => maximiza a 'pane' atual, se executar novamente volta a exibir as outras <Prefix> { ou } => mover 'pane' de lugar <Prefix> ; => alterana para a ultima pane <Prefix> Alt(segura) setas; => redimensiona o tamanho da pane","title":"Pane (split window)"},{"location":"terminais/tmux/#commands","text":"<Prefix> : => para digitar o comando a ser executado, ex: 'kill-window' <Prefix> f => procura o termo em todas as 'window' e 'panes' <Prefix> d => 'destaca' da sess\u00e3o, mas mantem a sess\u00e3o aberta <Prefix> ? => exibe uma lista de comandos que podem ser utilizados","title":"Commands"},{"location":"terminais/tmux/#sessions","text":"para listar sess\u00f5es: tmux list-sessions para retornar a uma sess\u00e3o aberta: tmux attach -t 0 #=> Ou o nome da sess\u00e3o para destruir uma session: tmux kill-session -t 0 #=> Ou o nome da sess\u00e3o para destruir TODAS as sess\u00f5es abertas: tmux kill-server para criar uma nova sess\u00e3o (new-session ou alias new): tmux new -s nome-da-sess","title":"Sessions"}]}